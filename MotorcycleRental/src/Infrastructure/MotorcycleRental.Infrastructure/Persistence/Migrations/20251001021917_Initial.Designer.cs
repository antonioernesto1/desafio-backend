// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorcycleRental.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MotorcycleRental.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251001021917_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MotorcycleRental.Domain.Aggregates.DeliveryDrivers.DeliveryDriver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cnpj");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_delivery_drivers");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("ix_delivery_drivers_cnpj");

                    b.ToTable("delivery_drivers", (string)null);
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Aggregates.Motorcycles.Motorcycle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("license_plate");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_motorcycles");

                    b.HasIndex("LicensePlate")
                        .IsUnique()
                        .HasDatabaseName("ix_motorcycles_license_plate");

                    b.ToTable("motorcycles", (string)null);
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Aggregates.Rentals.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DeliveryDriverId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("delivery_driver_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_end_date");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("initial_date");

                    b.Property<string>("MotorcycleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("motorcycle_id");

                    b.Property<int>("Plan")
                        .HasColumnType("integer")
                        .HasColumnName("plan");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("return_date");

                    b.HasKey("Id")
                        .HasName("pk_rentals");

                    b.HasIndex("DeliveryDriverId")
                        .HasDatabaseName("ix_rentals_delivery_driver_id");

                    b.HasIndex("MotorcycleId")
                        .HasDatabaseName("ix_rentals_motorcycle_id");

                    b.ToTable("rentals", (string)null);
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Aggregates.DeliveryDrivers.DeliveryDriver", b =>
                {
                    b.OwnsOne("MotorcycleRental.Domain.Aggregates.DeliveryDrivers.ValueObjects.Cnh", "Cnh", b1 =>
                        {
                            b1.Property<string>("DeliveryDriverId")
                                .HasColumnType("text")
                                .HasColumnName("id");

                            b1.Property<string>("ImagePath")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("cnh_image_path");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("cnh_number");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("cnh_type");

                            b1.HasKey("DeliveryDriverId");

                            b1.HasIndex("Number")
                                .IsUnique()
                                .HasDatabaseName("ix_delivery_drivers_cnh_number");

                            b1.ToTable("delivery_drivers");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryDriverId")
                                .HasConstraintName("fk_delivery_drivers_delivery_drivers_id");
                        });

                    b.Navigation("Cnh")
                        .IsRequired();
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Aggregates.Rentals.Rental", b =>
                {
                    b.HasOne("MotorcycleRental.Domain.Aggregates.DeliveryDrivers.DeliveryDriver", "DeliveryDriver")
                        .WithMany()
                        .HasForeignKey("DeliveryDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_delivery_drivers_delivery_driver_id");

                    b.HasOne("MotorcycleRental.Domain.Aggregates.Motorcycles.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_motorcycles_motorcycle_id");

                    b.Navigation("DeliveryDriver");

                    b.Navigation("Motorcycle");
                });
#pragma warning restore 612, 618
        }
    }
}
